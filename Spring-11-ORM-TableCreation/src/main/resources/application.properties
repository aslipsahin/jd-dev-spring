#The following commented lines from 3 to 21 are for h2 DB which is an in-built db of spring. but i will use postgre instead of this.
        #
        ##add the connection details:
        #spring.datasource.url=jdbc:h2:mem:testdb  //when you first connect to DB for H2 on browser check if JDBC URL is the same with this. If not change it.
        #spring.datasource.username=sa
        #spring.datasource.password=
        #
        ##define which driver i am gonna use. in this case i will use h2 driver
        #spring.datasource.driver-class-name=org.h2.Driver
        #
        ##hibernate introduction: (you can use different frameworks as well)
        #spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
        #
        ##if you want to see the queries in the console
        #spring.jpa.show-sql=true
        #
        ##give the path to the local host to be able to see the h2 on the browser on default port which is 8080
        #spring.h2.console.path=/h2-console
        #
        ##to make sure to see the console whe you navigate to web
        #spring.h2.console.enabled=true

#i used port 5432 first i created the postgre, so i will use it here as well, and also my db's name was cyber. so i will use it as well
spring.datasource.url=jdbc:postgresql://localhost:5432/cyber2_db
spring.datasource.username=postgres
spring.datasource.password=Tolga2020
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#below line: "create" will first drop if table already exists then recreate it. other options are validate, create-drop, update.
spring.jpa.hibernate.ddl-auto=create
#if i want to initially put some data into db, i need the following configuration. the data file is in data.sql and the file name is exactly must be like it. it will check directly data.sql
spring.datasource.initialization-mode=always